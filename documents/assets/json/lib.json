{
    "Wilib":{
        "login(username, password)":{
            "params": {
                "required": {
                    "username": "String. Insert your username",
                    "password": "String. Insert your password"
                },
                "optional": {

                }
            },
            "returns": "A Client object for this login session", 
            "explain": "From your username and password, return a client object for controlling your login",
            "example": "import wilibs.wilib\nclient = wilib.login('username', 'password')\nproject.getProjectById(56)"
        },
        "loginByToken(token)": {
            "params": {
                "required": {
                    "token": "String. Your token string."
                },
                "optional": {

                }
            },
            "returns": "A Client object for this login session", 
            "explain": "From your token, return a client object for controlling your login",
            "example": "import wilibs.wilib\nclient = wilib.loginByToken('YOUR_TOKEN')\nproject.getProjectById(56)"
        }
    },
    "Client": {
        "getAllProjects()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "A list of Project object", 
            "explain": "Get a list of project from your login session",
            "example": "import wilibs.wilib\nclient = wilib.loginByToken('YOUR_TOKEN')\nprojects = client.getAllProjects()"
        },
        "getProjectById(projectId)": {
            "params": {
                "required": {
                    "projectId": "Integer. Id of project with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A Project object",
            "explain": "Get a project with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nproject = client.getProjectById(55)\nproject.delete()"
        },
        "getWellById(wellId)": {
            "params": {
                "required": {
                    "wellId": "Integer. Id of well with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A Well object",
            "explain": "Get a well with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nwell = client.getWellById(55)\nwell.delete()"
        },
        "getDatasetById(datasetId)": {
            "params": {
                "required": {
                    "datasetId": "Integer. Id of project with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A Dataset object",
            "explain": "Get a dataset with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nproject = client.getDatasetById(55)\ndataset.delete()"
        },
        "getCurveById(curveId)": {
            "params": {
                "required": {
                    "curveId": "Integer. Id of curve with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A Curve object",
            "explain": "Get a curve with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\ncurve = client.getCurveById(55)\ncurve.delete()"
        },
        "getHistogramById(histogramId)": {
            "params": {
                "required": {
                    "histogramId": "Integer. Id of project with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A Histogram object",
            "explain": "Get a histogram with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nhistogram = client.getHistogramById(55)\nhistogram.delete()"
        },
        "getCrossPlotById(crossPlotId)": {
            "params": {
                "required": {
                    "crossPlotId": "Integer. Id of project with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A CrossPlot object",
            "explain": "Get a crossPlot with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\ncrossPlot = client.getCrossPlotById(55)\ncrossPlot.delete()"
        },
        "getImageSetById(imageSetId)": {
            "params": {
                "required": {
                    "imageSetId": "Integer. Id of project with you want to get from your login session"
                }, 
                "optional": {

                }
            },
            "returns": "A ImageSet object",
            "explain": "Get a imageSet with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nimageSet = client.getImageSetById(55)\nimageSet.delete()"
        },
        "getProjectByName(projectName)": {
            "params": {
                "required": {
                    "projectName": "String. Name of project you want to query"
                }, 
                "optional": {

                }
            },
            "returns": "A Project object",
            "explain": "Get a project with specified name. Print err if get err and return None",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nproject = client.getProjectByName('Example Project')\nproject.delete()"
        },
        "getWellByName(wellName, projectName)": {
            "params": {
                "required": {
                    "wellName": "String, Name of well you want to query",
                    "projectName": "String. Name of project you want to query well from"
                }, 
                "optional": {

                }
            },
            "returns": "A Well object",
            "explain": "Get a well with specified name. Print err if get err and return nothing",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nwell = client.getWellByName('Example Well', 'Example Project')\nwell.delete()"
        },
        "getDatasetByName(datasetName, wellName, projectName)": {
            "params": {
                "required": {
                    "datasetName": "String. Name of dataset you want to query",
                    "wellName": "String. Name of well you want to query from",
                    "projectName": "String. Name of project you want to query well from"
                }, 
                "optional": {

                }
            },
            "returns": "A Dataset object",
            "explain": "Get a dataset with specified name. Print err if get err and return nothing",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\ndataset = client.getDatasetByName('Example Dataset', 'Example Well', 'Example Project')\ndataset.delete()"
        },
        "getCurveByName(curveName, datasetName, wellName, projectName)": {
            "params": {
                "required": {
                    "curveName": "String. Name of curve you want to query",
                    "datasetName": "String. Name of dataset you want to query from",
                    "wellName": "String. Name of well you want to query from",
                    "projectName": "String. Name of project you want to query well from"
                }, 
                "optional": {

                }
            },
            "returns": "A Curve object",
            "explain": "Get a curve with specified name. Print err if get err and return nothing",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\ncurve = client.getCurveByName('Example curve', 'Example Dataset', 'Example Well', 'Example Project')\ncurve.delete()"
        },
        "getLogPlotByName(plotName, projectName)": {
            "params": {
                "required": {
                    "plotName": "String. Name of log plot you want to query",
                    "projectName": "String. Name of project you want to query from"
                }, 
                "optional": {

                }
            },
            "returns": "A Plot object",
            "explain": "Get a plot with specified name. Print err if get err and return nothing",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nplot = client.getLogPlotByName('Example Plot','Example Project')\nplot.delete()"
        },
        "getCrossPlotByName(crossPlotName, projectName)": {
            "params": {
                "required": {
                    "crossPlotName": "String. Name of cross plot you want to query",
                    "projectName": "String. Name of project you want to query from"
                }, 
                "optional": {

                }
            },
            "returns": "A CrossPlot object",
            "explain": "Get a cross plot with specified name. Print err if get err and return nothing",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\ncrossPlot = client.getCrossPlotByName('Example Cross Plot', 'Example Project')\ncrossPlot.delete()"
        },
        "getHistogramByName(histogramName, projectName)": {
            "params": {
                "required": {
                    "histogramName": "String. Name of histogram you want to query",
                    "projectName": "String. Name of project you want to query from"
                }, 
                "optional": {

                }
            },
            "returns": "A Histogram object",
            "explain": "Get a histogram with specified name. Print err if get err and return nothing",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nhistogram = client.getHistogramByName('Example Histogram', 'Example Project')\nhistogram.delete()"
        },
        "wiSavefig(plt, fileName, **data)": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "newProject(**dict)": {
            "params": {
                "required": {
                    "dict.name": "String. Name of new project"
                },
                "optional": {
                    "dict.company": "String. Company of new project",
                    "dict.department": "String. Department of new project",
                    "dict.description": "String. Description of new project"
                }
            },
            "returns": "A Project object if create project successfully, None if fail",
            "explain": "Create a new project",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nproject = client.newProject(name='example name', description='example project description')\nif project:\n\tprint('create project successful')"
        },
        "getMarkerSetTemplateById(id)": {
            "params": {
                "required": {
                    "id": "Integer. Id of MarkerSet Template"
                },
                "optional": {

                }
            },
            "returns": "MarkerSetTemplate object if success, None if fail",
            "explain": "Get a MarkerSet Template with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nmkt = client.getMarkerSetTemplateById(55)\nprint(mkt)"
        },
        "getMarkerTemplateById(id)": {
            "params": {
                "required": {
                    "id": "Integer. Id of Marker Template"
                },
                "optional": {

                }
            },
            "returns": "MarkerTemplate object if success, None if fail",
            "explain": "Get a Marker Template with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nmkt = client.getMarkerTemplateById(55)\nprint(mkt)"
        },
        "getMarkerSetById(id)": {
            "params": {
                "required": {
                    "id": "Integer. Id of Marker Set"
                },
                "optional": {

                }
            },
            "returns": "MarkerSet object if success, None if fail",
            "explain": "Get a Marker Set with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nmkt = client.getMarkerSetById(55)\nprint(mkt)"
        },
        "getZoneSetTemplateById(id)": {
            "params": {
                "required": {
                    "id": "Integer. Id of Zone Set Template"
                },
                "optional": {

                }
            },
            "returns": "ZoneSetTemplate object if success, None if fail",
            "explain": "Get a ZoneSet Template with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nzst = client.getZoneSetTemplateById(55)\nprint(zst)"
        },
        "getZoneSetById(id)": {
            "params": {
                "required": {
                    "id": "Integer. Id of Zone Set"
                },
                "optional": {

                }
            },
            "returns": "ZoneSet object if success, None if fail",
            "explain": "Get a ZoneSet with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nzs = client.getZoneSetById(55)\nprint(zs)"
        },
        "getZoneById(id)": {
            "params": {
                "required": {
                    "id": "Integer. Id of Zone"
                },
                "optional": {

                }
            },
            "returns": "Zone object if success, None if fail",
            "explain": "Get a Zone with specified id",
            "example": "client = wilib.loginByToken('YOUR_TOKEN')\nzone = client.getZoneById(55)\nprint(zone)"
        }
    }
    ,
    "Project": {
        "getAllWells()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A list of Well object",
            "explain": "Get a list of well in this project",
            "example": "project = client.getProjectById(56)\nwells = project.getAllWells()\nprint(wells)"
        },
        "getAllHistograms()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A list of Histogram object",
            "explain": "Get a list of histogram in this project",
            "example": "project = client.getProjectById(56)\nhistograms = project.getAllHistograms()\nprint(histograms)"
        },
        "getAllLogPlots()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A list of LogPlot object",
            "explain": "Get a list of log plot in this project",
            "example": "project = client.getProjectById(56)\nplots = project.getAllLogPlots()\nprint(plots)"
        },
        "getAllCrossPlots()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A list of CrossPlot object",
            "explain": "Get a list of cross plot in this project",
            "example": "project = client.getProjectById(56)\ncrossPlots = project.getAllCrossPlots()\nprint(crossPlots)"
        },
        "getId()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A integer which is id of this project",
            "explain": "Get id of project object",
            "example": "project = client.getProjectById(56)\nid = project.getId()\nprint(id)"
        },
        "getInfo()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A json contain project info",
            "explain": "Get minimal info of this project",
            "example": "project = client.getProjectById(56)\ninfo = project.getInfo()\nprint(info)"
        },
        "getFullInfo()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "A json contain project info full version",
            "explain": "Get full info of this project",
            "example": "project = client.getProjectById(56)\nfullInfo = project.getFullInfo()\nprint(fullInfo)"
        },
        "delete()": {
            "params": {
                "required": {
                }, 
                "optional": {
                }
            },
            "returns": "Return True if successfully delete this project, False if get some error",
            "explain": "Delete this project.\nWarning: You should delete this project object right after call this function successful",
            "example": "project = client.getProjectById(56)\nsuccess = project.delete()\nif success:\n\tdel project"
        },
        "newWell(**dict)": {
            "params": {
                "required": {
                    "dict.name": "String. name for new well"
                },
                "optional": {
                    "dict.color": "String. color of well",
                    "dict.unit": "String. unit of well",
                    "dict.idWell": "Integer. id for well. Should leave it create automatic"
                }
            },
            "returns": "Return a well object for new Well you just created. None if create well false",
            "explain": "Create a new well in this project",
            "example": "project = client.getProjectById(56)\nnewWell = project.newWell(name='new well', unit='m')\nif newWell:\n\tnewWell.delete()"            
        },
        "newBlankCrossPlot(name)": {
            "params": {
                "required": {
                    "name": "String. name for new blank cross plot"
                },
                "optional": {

                }
            },
            "returns": "Return a CrossPlot object for new cross plot you just created\nReturn None if create new CrossPlot fail",
            "explain": "Create a new blank Cross Plot in this project",
            "example": "project = client.getProjectById(56)\ncrossPlot = project.newBlankCrossPlot('Blank Cross Plot')\nif crossPlot:\n\tcrossPlot.delete()"
        },
        "newBlankPlot(name)": {
            "params": {
                "required": {
                    "name": "String. name for new blank plot"
                },
                "optional": {

                }
            },
            "returns": "Return a Plot object for new cross plot you just created\nReturn None if create new Plot fail",
            "explain": "Create a new blank Plot in this project",
            "example": "project = client.getProjectById(56)\nplot = project.newBlankPlot('Blank Plot')\nif plot:\n\tplot.delete()"
        },
        "newBlankHistogram(name)": {
            "params": {
                "required": {
                    "name": "String. name for new blank histogram"
                },
                "optional": {

                }
            },
            "returns": "Return a Histogram object for new cross plot you just created\nReturn None if create new Histogram fail",
            "explain": "Create a new blank Histogram in this project",
            "example": "project = client.getProjectById(56)\nhistogram = project.newBlankHistogram('Blank Cross Plot')\nif histogram:\n\thistogram.delete()"
        },
        "findDatasetsByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. dataset tag need to find"
                },
                "optional": {

                }
            },
            "returns": "Array of Datasets object match the tag, array can be empty",
            "explain": "Find all dataset that match tag",
            "example": "project = client.getProjectById(56)\ndatasets = project.findDatasetsByTag('Example Tag')\nprint(datasets)"
        },
        "findWellsByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. well tag need to find"
                },
                "optional": {

                }
            },
            "returns": "Array of Well object match the tag, array can be empty",
            "explain": "Find all well that match tag",
            "example": "project = client.getProjectById(56)\nwells = project.findWellsByTag('Example Tag')\nprint(wells)"
        },
        "findCurvesByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. curve tag need to find"
                },
                "optional": {

                }
            },
            "returns": "Array of Curve object match the tag, array can be empty",
            "explain": "Find all curve that match tag",
            "example": "project = client.getProjectById(56)\ncurves = project.findCurvesByTag('Example Tag')\nprint(curves)"
        },
        "findLogPlotsByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. plot tag need to find"
                },
                "optional": {

                }
            },
            "returns": "Array of Plot object match the tag, array can be empty",
            "explain": "Find all plot that match tag",
            "example": "project = client.getProjectById(56)\nplots = project.findPlotsByTag('Example Tag')\nprint(plots)"
        },
        "findCrossPlotsByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. cross plot tag need to find"
                },
                "optional": {

                }
            },
            "returns": "Array of CrossPlot object match the tag, array can be empty",
            "explain": "Find all cross plot that match tag",
            "example": "project = client.getProjectById(56)\ncrossPlots = project.findCrossPlotsByTag('Example Tag')\nprint(crossPlots)"
        },
        "findHistogramsByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. histogram tag need to find"
                },
                "optional": {

                }
            },
            "returns": "Array of Histogram object match the tag, array can be empty",
            "explain": "Find all histogram that match tag",
            "example": "project = client.getProjectById(56)\nhistograms = project.findHistogramsByTag('Example Tag')\nprint(histograms)"
        },
        "findAllByTag(tag)": {
            "params": {
                "required": {
                    "tag": "String. tag need to find"
                },
                "optional": {
                    
                }
            },
            "returns": "Object contain key: 'wells', 'datasets', 'curves', 'plots', 'crossPlots', 'histograms'.\nValue of each key is array of object",
            "explain": "Find all datasets, wells, plots, crossPlots, histograms which match a specified tag",
            "example": "project = client.getProjectById(56)\nmatch = project.findAllByTag('Example Tag')\nprint(match['wells'])"
        },
        "renameTag(oldTag, newTag)": {
            "params": {
                "required": {
                    "oldTag": "String. old tag which need to rename",
                    "newTag": "String. new name need to change to"
                },
                "optional": {

                }
            },
            "returns": "True if successfully change all tag to new name. False if get error.",
            "explain": "Rename name of tag to new name",
            "example": "project = client.getProjectById(56)\nsuccess = project.renameTag('old tag', 'new tag')\nif success:\n\tprint('change tag name successfully')"
        },
        "getAllMarkerSetTemplates()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "Array of MarketSetTemplate object, Array empty if fail",
            "explain": "Get all marker set object in this project",
            "example": "project = client.getProjectById(55)\nmks = project.getAllMarkerSetTemplates()\nprint(mks)"
        },
        "getAllZoneSetTemplates()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "Array of ZoneSetTemplate object, Array empty if fail",
            "explain": "Get all ZoneSet Template object in this project",
            "example": "project = client.getProjectById(55)\nzst = project.getAllZoneSetTemplates()\nprint(zst)"
        }
    },
    "Well": {
        "newZoneSet(zoneSetName)": {
            "params": {
                "required": {
                    "zoneSetName": "String. Name of Zone Set that need to create"
                },
                "optional": {

                }
            },
            "returns": "Json contain info of new zone set if success, None if create zone set fail",
            "explain": "Create new Zone set in well with specified name",
            "example": "jsonZoneSet = well.newZoneSet('ZoneSet Name')\nif jsonZoneSet:\n\tprint(jsonZoneSet)"
        },
        "getWellHeaders()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "Array<json> well headers",
            "explain": "Get all headers info as array of json",
            "example": "headers = well.getWellHeaders()\nprint(headers)"
        },
        "getWellHeader(headerName)": {
            "params": {
                "required": {
                    "headerName": "String. header name need to query"
                },
                "optional": {

                }
            },
            "returns": "Json info of header. None if header not found",
            "explain": "Get header info with specified name",
            "example": "header = well.getWellHeader('Example header name')\nif header:\n\tprint(header)"
        },
        "rename(newName)": {
            "params": {
                "required": {
                    "newName": "String. new name need to change to"
                },
                "optional": {

                }
            },
            "returns": "True if changing name successful, False if error",
            "explain": "Rename well",
            "example": "success = well.rename('New name')\nif success:\n\tprint('rename successfully')"
        },
        "exportWellDatacsv()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "downloadExportedFile()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "updateDefaultWellHeaders": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "updateWellHeader(**dict)": {
            "params": {
                "required": {
                    "dict.header": "String.Name of header need to update",
                    "dict.value": "String. New value of header. Can be empty",
                    "dict.unit": "String.New unit of header. Can be empty"
                },
                "optional": {

                }
            },
            "returns": "True if update successfully. False if fail",
            "explain": "Update Well header in well",
            "example": "success = well,updateWellHeader(header='example header', unit='', value=''"
        },
        "addTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string. tags need to add to well"
                },
                "optional": {

                }
            },
            "returns": "True if successfully add tags. False if fail",
            "explain": "Add some tags to well",
            "example": "success = well.addTags(['tag1', 'tag2'])\nif success:\n\tprint('Added tags successfully')"
        },
        "removeTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string. tags need to remove from well"
                },
                "optional": {

                }
            },
            "returns": "True if successfully remove tags. False if fail",
            "explain": "Remove some tags from well",
            "example": "success = well.removeTags(['tag1', 'tag2'])\nif success:\n\tprint('Removed tags successfully')"
        },
        "getAllImageSets()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "Array of ImageSet object. Empty if well don't have Image Set or if get fail",
            "explain": "Get all Image Sets in well",
            "example": "imageSets = well.getAllImageSets()\nprint(imageSets)"
        },
        "getInfo()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "JSON",
            "explain": "Get info of well as JSON",
            "example": "info = well.getInfo()\nprint(info)"
        },
        "getFullInfo()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "JSON",
            "explain": "Get full info of well as JSON",
            "example": "info = well.getInfo()\nprint(info)"
        },
        "edit(**dict)": {
            "params": {
                "required": {
                    
                },
                "optional": {
                    "dict.name": "String. New name of well",
                    "dict.unit": "String. New unit of well",
                    "dict.relatedTo": "Object. New related to of well"
                }
            },
            "returns": "True if edit successfully, False if fail",
            "explain": "Edit name, unit, relatedTo of Well.",
            "example": "success = well.edit(name = 'new name', unit='m')\nif success:\n\tprint('edited well successfully')"
        },
        "getAllDatasets()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "Array of Dataset object. Array empty if fail or have no dataset",
            "explain": "Get list dataset in this well",
            "example": "datasets = well.getAllDatasets()\nprint(datasets)"
        },
        "delete()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "True if delete well successfully, False if delete fail",
            "explain": "Delete this well. Do not use this object(reference) after delete it. Should delete it",
            "example": "well = client.getWellById(19)\nsuccess = well.delete()\nif success:\n\tdel well"
        },
        "newDataset(**dict)": {
            "params": {
                "required": {
                    "dict.name": "String. Name of dataset",
                    "dict.step": "Float. Step of well. Can be zero",
                    "dict.top": "Float. Top of well",
                    "dict.bottom": "Float. Bottom of well",
                    "dict.unit": "String. Unit well"
                },
                "optional": {
                    "dict.datasetKey": "String. Key of dataset",
                    "dict.datasetLabel": "String. Label of dataset"
                }
            },
            "returns": "Dataset object if create successfully, None if fail",
            "explain": "Create new Dataset in this well",
            "example": "dataset = well.newDataset(name = 'new', step = 0.5, top = 3500, bottom = 7000, unit = 'm')\nif dataset:\n\tprint(dataset)"
        },
        "getAllMarkerSets()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "Array of MarkerSet object in well. Array empty if err or no MarkerSet found",
            "explain": "Get all MarkerSet in well",
            "example": "mks = well.getAllMarkerSets()\nprint(mks)"
        },
        "getAllZoneSets()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "Array of ZoneSet object in well. Array empty if err or no ZoneSet found",
            "explain": "Get all ZoneSet in well",
            "example": "zs = well.getAllZoneSets()\nprint(zs)"
        }
    },
    "Dataset": {
        "getInfo()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "JSON. None if fail",
            "explain": "Get info of dataset as JSON",
            "example": "info = dataset.getInfo()\nprint(info)"
        },
        "newNumericCurve(**dict)": {
            "params": {
                "required": {
                    "dict.name": "String. Name of new curve"
                },
                "optional": {
                    "dict.initValue": "Number. Init value for new curve",
                    "dict.idFamily": "Integer. family id for new curve",
                    "dict.unit": "String. Unit for new curve"
                }
            },
            "returns": "Curve object of new curve, None if fail",
            "explain": "Create a new numberic curve in dataset. If step = 0, clone depth of first curve in dataset",
            "example": "curve = client.getDatasetById(55).newNumericCurve(name = 'new curve')\nif curve:\n\tprint('curve curve successfully')\n\tprint(curve)"
        },
        "newTextCurve(**dict)": {
            "params": {
                "required": {
                    "dict.name": "String. Name of new curve"
                },
                "optional": {
                    "dict.initValue": "String. Init value for new curve",
                    "dict.idFamily": "Integer. family id for new curve",
                    "dict.unit": "String. Unit for new curve"
                }
            },
            "returns": "Curve object of new curve, None if fail",
            "explain": "Create a new text curve in dataset. If step = 0, clone depth of first curve in dataset",
            "example": "curve = client.getDatasetById(55).newTextCurve(name = 'new curve')\nif curve:\n\tprint('curve curve successfully')\n\tprint(curve)"
        },
        "newArrayCurve(**dict)": {
            "params": {
                "required": {
                    "dict.name": "String. Name of new curve",
                    "dict.dimension": "Integer. Only Integer, do not insert any kind of data else"
                },
                "optional": {
                    "dict.initValue": "Number. Init value for new curve",
                    "dict.idFamily": "Integer. family id for new curve",
                    "dict.unit": "String. Unit for new curve"
                }
            },
            "returns": "Curve object of new curve, None if fail",
            "explain": "Create a new array curve in dataset. If step = 0, clone depth of first curve in dataset",
            "example": "curve = client.getDatasetById(55).newArrayCurve(name = 'new curve', dimension = 3)\nif curve:\n\tprint('curve curve successfully')\n\tprint(curve)"
        },
        "getAllCurves()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "Array of curve object. Array can be empty if dataset don't have curve or get curve error",
            "explain": "Get all curve in dataset",
            "example": "curves = dataset.getAllCurves()\nprint(curves)"
        },
        "edit(**dict)": {
            "params": {
                "required": {
                    
                },
                "optional": {
                    "dict.name": "String. New name",
                    "dict.idWell": "Number. New id well. Should be a valid id",
                    "dict.datasetKey": "String. New datasetKey",
                    "dict.datasetLabel": "String. New datasetLabel"
                }
            },
            "returns": "True if edit successfully. False if fail",
            "explain": "Edit name, datasetKey, datasetLabel of dataset, or move dataset to another well by changing idWell",
            "example": "success = dataset.edit(name = 'new name')\nif success\n\tprint('edited successfully')"
        },
        "delete()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "True if delete successfully, False if fail",
            "explain": "Delete this dataset. Do not keep this dataset object after call delete it",
            "example": "success = dataset.delete()\nif success:\n\tdel dataset"
        },
        "rename(newName)": {
            "params": {
                "required": {
                    "newName": "String. New name of dataset"
                },
                "optional": {

                }
            },
            "returns": "True if rename successfully, False if fail",
            "explain": "Fast rename dataset, also change datasetKey, datasetLabel to new name",
            "example": "success = dataset.rename('new name')\nif success:\n\tprint('rename successfully')"
        },
        "getDepth()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "getSampleRate()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "getTotalDepth()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "addTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to add to dataset"
                },
                "optional": {

                }
            },
            "returns": "True if add tags successfully, False if fail",
            "explain": "Add tags to dataset",
            "example": "success = dataset.addTags(['tag1', 'tag2'])\nif success:\n\tprint('added tags')"
        },
        "removeTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to remove from dataset"
                },
                "optional": {

                }
            },
            "returns": "True if remove tags successfully, False if fail",
            "explain": "Remove tags fromm dataset",
            "example": "success = dataset.removeTags(['tag1', 'tag2'])\nif success:\n\tprint('removed tags')"
        }
    },
    "Curve": {
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON. None if fail",
            "explain": "Get info of curve as JSON",
            "example": "info = curve.getInfo()\nprint(info)"
        },
        "getCurveData(columnIndex)": {
            "params": {
                "required": {

                },
                "optional": {
                    "columnIndex": "Array of integer. Contain index want to query data in array type data."
                }
            },
            "returns": "Array of object which contain key 'x' and key 'y'.( [{'x': 5, 'y': 6}] )",
            "explain": "Get curve data. key 'y' as index run from 0 to end. if 'y' is not integer, this is core data",
            "example": "data = curve.getCurveData()\nprint(data)\ndata = curve.getCurveData([0,1])\nprint(data)"
        },
        "updateRawCurveData(curveData)": {
            "params": {
                "required": {
                    "curveData": "Array of object contain two key 'x' and 'y'. 'y' can be index if curve have step, depth if step zero"
                },
                "optional": {

                }
            },
            "returns": "True if update successfully, False if fail",
            "explain": "Update curve data to server",
            "example": "curveData = ['y':0, 'x':35]\nsuccess = curve.updateRawCurveData(curveData)\nif success:\n\tprint('updated')"
        },
        "updateRawCurveDataByFile(curveDataFile)": {
            "params": {
                "required": {
                    "curveDataFile": "Txt file or readable text file"
                },
                "optional": {

                }
            },
            "returns": "True if update successfully, False if fail",
            "explain": "Update file curve data to server",
            "example": "with open('text', 'r+') as f:\n\tcurve.updateRawCurveDataByFile(f)"
        },
        "edit(**dict)": {
            "params": {
                "required": {
                    
                },
                "optional": {
                    "dict.name": "String. New name",
                    "dict.duplicate": "Number",
                    "dict.unit": "String",
                    "dict.type": "String. (ARRAY, NUMBER, TEXT)",
                    "dict.dimension": "Number",
                    "dict.columnsTitle": "JSON",
                    "dict.idDataset": "Number",
                    "dict.idFamily": "Number",
                    "dict.relatedTo": "JSON"
                }
            },
            "returns": "True if edit successfully, False if fail",
            "explain": "Edit curve info.",
            "example": "success = curve.edit(name = 'new name', unit = 'm')\nif success:\n\tprint('edited')"
        },
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete successfully, False if fail",
            "explain": "Delete curve. Do not keep this object after call delete method successfully",
            "example": "success = curve.delete()\nif success:\n\tdel curve"
        },
        "clipDataCurve(minValue, maxValue)": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "copyFamily(sourceCurve)": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "",
            "explain": "",
            "example": ""
        },
        "rename(newName)": {
            "params": {
                "required": {
                    "newName": "New name of curve"
                },
                "optional": {

                }
            },
            "returns": "True if rename successfully, False if fail",
            "explain": "Rename curve",
            "example": "success = curve.rename('new name')\nif success:\n\tprint('change name success')"
        },
        "addTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to add to curve"
                },
                "optional": {

                }
            },
            "returns": "True if add tags successfully, False if fail",
            "explain": "Add tags to curve",
            "example": "success = curve.addTags(['tag1', 'tag2'])\nif success:\n\tprint('added tags')"
        },
        "removeTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to remove from curve"
                },
                "optional": {

                }
            },
            "returns": "True if remove tags successfully, False if fail",
            "explain": "Remove tags fromm curve",
            "example": "success = curve.removeTags(['tag1', 'tag2'])\nif success:\n\tprint('removed tags')"
        }
    },
    "LogPlot": {
        "edit(**dict)": {
            "params": {
                "required": {

                },
                "optional": {
                    
                }
            },
            "returns": "True if edit log plot info successfully, False if fail",
            "explain": "Edit plot info",
            "example": ""
        },
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete log plot info successfully, False if fail",
            "explain": "Delete log plot. Do not use this object after call delete method",
            "example": "success = plot.delete()\nif success:\n\tdel plot"
        },
        "getInfo()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "JSON. None if fail",
            "explain": "Get info of log plot as JSON",
            "example": "info = plot.getInfo()\nprint(info)"
        },
        "addTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to add to log plot"
                },
                "optional": {

                }
            },
            "returns": "True if add tags successfully, False if fail",
            "explain": "Add tags to log plot",
            "example": "success = plot.addTags(['tag1', 'tag2'])\nif success:\n\tprint('added tags')"
        },
        "removeTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to remove from log plot"
                },
                "optional": {

                }
            },
            "returns": "True if remove tags successfully, False if fail",
            "explain": "Remove tags from log plot",
            "example": "success = plot.removeTags(['tag1', 'tag2'])\nif success:\n\tprint('removed tags')"
        }
    },
    "CrossPlot": {
        "edit(**dict)": {
            "params": {
                "required": {

                },
                "optional": {
                    
                }
            },
            "returns": "True if edit cross plot info successfully, False if fail",
            "explain": "Edit cross plot info",
            "example": ""
        },
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete cross plot info successfully, False if fail",
            "explain": "Delete cross plot. Do not use this object after call delete method",
            "example": "success = crossPlot.delete()\nif success:\n\tdel crossPlot"
        },
        "getInfo()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "JSON. None if fail",
            "explain": "Get info of plot as JSON",
            "example": "info = crossPlot.getInfo()\nprint(info)"
        },
        "addTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to add to plot"
                },
                "optional": {

                }
            },
            "returns": "True if add tags successfully, False if fail",
            "explain": "Add tags to cross plot",
            "example": "success = crossPlot.addTags(['tag1', 'tag2'])\nif success:\n\tprint('added tags')"
        },
        "removeTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to remove from cross plot"
                },
                "optional": {

                }
            },
            "returns": "True if remove tags successfully, False if fail",
            "explain": "Remove tags fromm cross plot",
            "example": "success = crossPlot.removeTags(['tag1', 'tag2'])\nif success:\n\tprint('removed tags')"
        }
    },
    "Histogram": {
        "edit(**dict)": {
            "params": {
                "required": {

                },
                "optional": {
                    
                }
            },
            "returns": "True if edit histogram info successfully, False if fail",
            "explain": "Edit histogram info",
            "example": ""
        },
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete histogram info successfully, False if fail",
            "explain": "Delete histogram. Do not use this object after call delete method",
            "example": "success = histogram.delete()\nif success:\n\tdel histogram"
        },
        "getInfo()": {
            "params": {
                "required": {
                    
                },
                "optional": {

                }
            },
            "returns": "JSON. None if fail",
            "explain": "Get info of histogram as JSON",
            "example": "info = histogram.getInfo()\nprint(info)"
        },
        "addTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to add to histogram"
                },
                "optional": {

                }
            },
            "returns": "True if add tags successfully, False if fail",
            "explain": "Add tags to histogram",
            "example": "success = histogram.addTags(['tag1', 'tag2'])\nif success:\n\tprint('added tags')"
        },
        "removeTags(tags)": {
            "params": {
                "required": {
                    "tags": "Array of string describe tag need to remove from histogram"
                },
                "optional": {

                }
            },
            "returns": "True if remove tags successfully, False if fail",
            "explain": "Remove tags from histogram",
            "example": "success = histogram.removeTags(['tag1', 'tag2'])\nif success:\n\tprint('removed tags')"
        }
    },
    "MarkerSetTemplate": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this MarkerSet Template successfully, False if fail",
            "explain": "Remove this MarkerSetTemplate. Do not use this object after call delete method",
            "example": "mks = client.getMarkerSetTemplateById(55)\nsuccess = mks.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this Marker Set Template",
            "example": "mks = client.getMarkerSetTemplateById(55)\ninfo = mks.info()\nprint(info)"
        },
        "getAllMarkerTemplates()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "Array of Marker Template object. Array empty if fail or no marker template in marker set template",
            "explain": "Get all Marker Template in MarkerSet Template",
            "example": "mks = client.getMarkerSetTemplateById(55)\nmts = mks.getAllMarkerTemplates()\nprint(mts)"
        }
    },
    "MarkerTemplate": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this Marker Template successfully, False if fail",
            "explain": "Remove this Marker Template. Do not use this object after call delete method",
            "example": "mks = client.getMarkerTemplateById(55)\nsuccess = mks.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this Marker Template",
            "example": "mks = client.getMarkerTemplateById(55)\ninfo = mks.info()\nprint(info)"
        }
    },
    "MarkerSet": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this Marker Set successfully, False if fail",
            "explain": "Remove this Marker Set. Do not use this object after call delete method",
            "example": "mks = client.getMarkerSetById(55)\nsuccess = mks.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this Marker Set",
            "example": "mks = client.getMarkerSetById(55)\ninfo = mks.info()\nprint(info)"
        },
        "getAllMarkers()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "Array of Marker object. Array empty if fail or no marker in marker set",
            "explain": "Get all Marker in MarkerSet",
            "example": "mks = client.getMarkerSetById(55)\nmts = mks.getAllMarkers()\nprint(mts)"
        }
    },
    "Marker": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this Marker successfully, False if fail",
            "explain": "Remove this Marker. Do not use this object after call delete method",
            "example": "mks = client.getMarkerById(55)\nsuccess = mks.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this Marker",
            "example": "mks = client.getMarkerById(55)\ninfo = mks.getInfo()\nprint(info)"
        }
    },
    "ZoneSetTemplate": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this ZoneSetTemplate successfully, False if fail",
            "explain": "Remove this ZoneSetTemplate. Do not use this object after call delete method",
            "example": "zst = client.getZoneSetTemplateById(55)\nsuccess = zst.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this ZoneSetTemplate",
            "example": "zst = client.getZoneSetTemplateById(55)\ninfo = zst.getInfo()\nprint(info)"
        },
        "getAllZoneTemplates()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "Array of ZoneTemplate object. Array empty if fail or no Zone Template in ZoneSetTemplate",
            "explain": "Get all Zone Template in MarkerSet",
            "example": "zst = client.getZoneTemplateById(55)\nzts = mst.getAllZoneTemplates()\nprint(zts)"
        }
    },
    "ZoneTemplate": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this ZoneTemplate successfully, False if fail",
            "explain": "Remove this ZoneTemplate. Do not use this object after call delete method",
            "example": "zt = client.getZoneTemplateById(55)\nsuccess = zt.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this ZoneTemplate",
            "example": "zst = client.getZoneSetTemplateById(55)\nzonet = zst.getAllZoneTemplates()\ninfo = zonet[0].getInfo()\nprint(info)"
        }
    },
    "ZoneSet": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this ZoneSet successfully, False if fail",
            "explain": "Remove this ZoneSet. Do not use this object after call delete method",
            "example": "zs = client.getZoneSetById(55)\nsuccess = zs.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this ZoneSetTemplate",
            "example": "zst = client.getZoneSetById(55)\ninfo = zst.getInfo()\nprint(info)"
        },
        "getAllZones()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "Array of ZoneTemplate object. Array empty if fail or no Zone Template in ZoneSetTemplate",
            "explain": "Get all Zone Template in MarkerSet",
            "example": "zst = client.getZoneSetById(55)\nzs = zst.getAllZones()\nprint(zs)"
        },
        "rename(newName)": {
            "params": {
                "required": {
                    "newName": "String. New name of ZoneSet"
                },
                "optional": {

                }
            },
            "returns": "True if rename successfully, False if fail",
            "explain": "Rename this zone set",
            "example": "zs = client.getZoneSetById(55)\nsuccess = zs.rename('new name')\nif success:\n\tprint('rename successfully')"
        }
    },
    "Zone": {
        "delete()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "True if delete this Zone successfully, False if fail",
            "explain": "Remove this Zone. Do not use this object after call delete method",
            "example": "z = client.getZoneById(55)\nsuccess = z.delete()\nif success:\n\tprint('delete successfully')"
        },
        "getInfo()": {
            "params": {
                "required": {

                },
                "optional": {

                }
            },
            "returns": "JSON if success, None if fail",
            "explain": "Get info of this ZoneTemplate",
            "example": "zone = client.getZoneById(55)\ninfo = zone.getInfo()\nprint(info)"
        },
        "rename(newName)": {
            "params": {
                "required": {
                    "newName": "String. New name of Zone"
                },
                "optional": {

                }
            },
            "returns": "True if rename successfully, False if fail",
            "explain": "Rename this zone",
            "example": "z = client.getZoneById(55)\nsuccess = z.rename('new name')\nif success:\n\tprint('rename successfully')"
        }
    }
}